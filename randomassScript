local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UpdateFrequency = 1
local currentTarget = nil
local lockConnection = nil
local isLocked = false
local isRunning = true

local ANIMATION_ID = "rbxassetid://11343250001"
local TELEPORT_POSITION = Vector3.new(0, -435, 0)

-- Create a baseplate at Y = -500
local function createBaseplate()
    local baseplate = Instance.new("Part")
    baseplate.Size = Vector3.new(512, 1, 512)
    baseplate.Anchored = true
    baseplate.Position = Vector3.new(0, -500, 0)
    baseplate.Name = "CustomBaseplate"
    baseplate.Parent = workspace
end

createBaseplate()

-- Safely get character and root part
local function getCharacterRoot(player)
    local char = player.Character
    if not char then return nil end
    local root = char:FindFirstChild("HumanoidRootPart")
    return char, root
end

-- Attempt to forcefully teleport the player multiple times and ensure stability
local function forceTeleportPlayerToBaseplate()
    local success, err = pcall(function()
        local char, root = getCharacterRoot(LocalPlayer)
        if not char or not root then
            warn("Failed to find character or root for local player during teleport")
            return
        end
        
        -- Anchor the root part to prevent movement
        root.Anchored = true
        
        -- Brute force multiple teleports
        for i = 1, 3 do
            root.CFrame = CFrame.new(TELEPORT_POSITION)
            RunService.Heartbeat:Wait()  -- Wait a frame to let physics update
        end
        
        -- Wait one second for stability
        wait(1)
        
        -- Unanchor to restore normal movement
        root.Anchored = false
    end)
    
    if not success then
        warn("Error in forceTeleportPlayerToBaseplate:", err)
    end
end

-- When the animation is played, brute force the teleport
local function teleportLocalPlayerIfAnimation(track)
    local success, err = pcall(function()
        if track.Animation and track.Animation.AnimationId == ANIMATION_ID then
            forceTeleportPlayerToBaseplate()
        end
    end)
    if not success then
        warn("Error in teleportLocalPlayerIfAnimation:", err)
    end
end

local function connectAnimationListener(character)
    local success, err = pcall(function()
        local humanoid = character:FindFirstChild("Humanoid") or character:WaitForChild("Humanoid")
        local animator = humanoid:FindFirstChild("Animator") or humanoid:WaitForChild("Animator")
        animator.AnimationPlayed:Connect(teleportLocalPlayerIfAnimation)
    end)
    if not success then
        warn("Error connecting animation listener:", err)
    end
end

if LocalPlayer.Character then
    connectAnimationListener(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(function(character)
    connectAnimationListener(character)
end)

-- GUI creation unchanged
local function createGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PlayerTrackerGui"
    screenGui.ResetOnSpawn = false

    -- Remove existing GUI if it exists
    local existingGui = LocalPlayer.PlayerGui:FindFirstChild("PlayerTrackerGui")
    if existingGui then
        existingGui:Destroy()
    end

    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local LockButton = Instance.new("TextButton")
    LockButton.Size = UDim2.new(0, 120, 0, 40)
    LockButton.Position = UDim2.new(1, -140, 0, 10)
    LockButton.Text = "Lock In"
    LockButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    LockButton.Parent = screenGui

    local healthLabel = Instance.new("TextLabel")
    healthLabel.Size = UDim2.new(0, 200, 0, 40)
    healthLabel.Position = UDim2.new(1, -220, 0, 60)
    healthLabel.Text = "Waiting for target..."
    healthLabel.TextScaled = true
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    healthLabel.Parent = screenGui

    local teleportButton = Instance.new("TextButton")
    teleportButton.Size = UDim2.new(0, 120, 0, 40)
    teleportButton.Position = UDim2.new(1, -140, 0, 110)
    teleportButton.Text = "Teleport to Player"
    teleportButton.Visible = false
    teleportButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    teleportButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    teleportButton.Parent = screenGui

    return {
        screenGui = screenGui,
        lockButton = LockButton,
        healthLabel = healthLabel,
        teleportButton = teleportButton
    }
end

local function getPlayerWithLowestHealth()
    local lowestHealthPlayer = nil
    local lowestHealth = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            local humanoid = character and character:FindFirstChild("Humanoid")

            if humanoid and humanoid.Health > 0 then
                if humanoid.Health < lowestHealth then
                    lowestHealth = humanoid.Health
                    lowestHealthPlayer = player
                end
            end
        end
    end

    return lowestHealthPlayer
end

local function resetCamera()
    local camera = workspace.CurrentCamera
    if not camera then return end
    camera.CameraType = Enum.CameraType.Custom
end

-- Attempt to detect target player playing the animation
local function connectTargetAnimationListener(targetPlayer)
    local success, err = pcall(function()
        if targetPlayer and targetPlayer.Character then
            local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
            local animator = humanoid and humanoid:FindFirstChild("Animator")
            if animator then
                animator.AnimationPlayed:Connect(teleportLocalPlayerIfAnimation)
            end
        end
    end)
    if not success then
        warn("Error connecting target animation listener:", err)
    end
end

-- Hard lock: no prediction, just look directly at target's root part
local function lockOntoTarget(targetPlayer, gui)
    if lockConnection then 
        lockConnection:Disconnect()
        lockConnection = nil
    end

    if not targetPlayer then return end

    currentTarget = targetPlayer
    local camera = workspace.CurrentCamera
    if not camera then return end

    local VERTICAL_OFFSET = Vector3.new(0, 2, 0)

    connectTargetAnimationListener(targetPlayer)

    local heartbeat = RunService.Heartbeat:Connect(function()
        if not currentTarget or not currentTarget.Character then
            if heartbeat then heartbeat:Disconnect() end
            return
        end
    end)

    lockConnection = RunService.RenderStepped:Connect(function()
        if not currentTarget or not currentTarget.Character then
            if lockConnection then
                lockConnection:Disconnect()
                lockConnection = nil
            end
            if isLocked then
                local newTarget = getPlayerWithLowestHealth()
                if newTarget then
                    lockOntoTarget(newTarget, gui)
                else
                    resetCamera()
                end
            else
                resetCamera()
            end
            return
        end

        local targetRoot = currentTarget.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = currentTarget.Character:FindFirstChild("Humanoid")

        if not targetRoot or not humanoid or humanoid.Health <= 0 then
            if lockConnection then
                lockConnection:Disconnect()
                lockConnection = nil
            end
            if isLocked then
                local newTarget = getPlayerWithLowestHealth()
                if newTarget then
                    lockOntoTarget(newTarget, gui)
                else
                    resetCamera()
                end
            else
                resetCamera()
            end
            return
        end

        -- Directly set camera to face the target's root part instantly
        local targetPos = targetRoot.Position + VERTICAL_OFFSET
        camera.CFrame = CFrame.new(camera.CFrame.Position, targetPos)
    end)
end

local function updateGui(gui)
    local success, err = pcall(function()
        local targetPlayer = getPlayerWithLowestHealth()

        if targetPlayer and targetPlayer.Character then
            local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                gui.healthLabel.Text = string.format(
                    "Player: %s - Health: %d",
                    targetPlayer.Name,
                    math.floor(humanoid.Health)
                )
                gui.teleportButton.Visible = true
                return targetPlayer
            end
        end

        gui.healthLabel.Text = "No valid target"
        gui.teleportButton.Visible = false
        return nil
    end)

    if not success then
        warn("Error in updateGui:", err)
    end
end

local function teleportToPlayer(targetPlayer)
    local success, err = pcall(function()
        if not targetPlayer then return false end

        local char, root = getCharacterRoot(LocalPlayer)
        local tchar, troot = getCharacterRoot(targetPlayer)

        if root and troot then
            root.CFrame = troot.CFrame * CFrame.new(0, 0, 5)
            return true
        end
        return false
    end)
    if not success then
        warn("Error in teleportToPlayer:", err)
    end
end

local function init()
    local gui = createGui()

    gui.lockButton.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            isLocked = not isLocked
            gui.lockButton.Text = isLocked and "Unlock" or "Lock In"

            if isLocked then
                local targetPlayer = getPlayerWithLowestHealth()
                if targetPlayer then
                    lockOntoTarget(targetPlayer, gui)
                end
            else
                if lockConnection then
                    lockConnection:Disconnect()
                    lockConnection = nil
                end
                currentTarget = nil
                resetCamera()
            end
        end)
        if not success then
            warn("Error in lockButton click:", err)
        end
    end)

    gui.teleportButton.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            local targetPlayer = getPlayerWithLowestHealth()
            if targetPlayer then
                if teleportToPlayer(targetPlayer) then
                    isLocked = true
                    gui.lockButton.Text = "Unlock"
                    lockOntoTarget(targetPlayer, gui)
                end
            end
        end)
        if not success then
            warn("Error in teleportButton click:", err)
        end
    end)

    spawn(function()
        while isRunning do
            local success, err = pcall(function()
                updateGui(gui)
            end)

            if not success then
                warn("Update error:", err)
            end

            wait(UpdateFrequency)
        end
    end)

    gui.screenGui.Destroying:Connect(function()
        isRunning = false
        if lockConnection then
            lockConnection:Disconnect()
        end
    end)
end

init()