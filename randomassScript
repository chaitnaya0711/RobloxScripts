local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local currentTarget = nil
local lockConnection = nil
local isLocked = false
local CAMERA_OFFSET = Vector3.new(0, 2, 10) -- Distance behind player

-- Function to get the desired camera position behind the player
local function getDesiredCameraPosition(playerRoot, targetPos)
    local lookVector = (targetPos - playerRoot.Position).Unit
    return playerRoot.Position - (lookVector * CAMERA_OFFSET.Z) + Vector3.new(0, CAMERA_OFFSET.Y, 0)
end

local function lockOntoTarget(targetPlayer)
    if lockConnection then 
        lockConnection:Disconnect()
        lockConnection = nil
    end

    if not targetPlayer then return end
    currentTarget = targetPlayer
    local camera = workspace.CurrentCamera
    if not camera then return end

    lockConnection = RunService.RenderStepped:Connect(function(deltaTime)
        local playerCharacter = LocalPlayer.Character
        local playerRoot = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
        local targetCharacter = currentTarget.Character
        local targetRoot = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
        
        if not playerRoot or not targetRoot then
            return
        end

        -- Calculate the position where the camera should be
        local desiredCameraPos = getDesiredCameraPosition(playerRoot, targetRoot.Position)
        
        -- Create a CFrame that looks from the camera position to the target
        local newCameraCF = CFrame.new(desiredCameraPos, targetRoot.Position + Vector3.new(0, 2, 0))
        
        -- Smoothly interpolate to the new camera position
        camera.CFrame = camera.CFrame:Lerp(newCameraCF, 0.1)
    end)
end

-- Function to handle camera reset
local function resetCamera()
    local camera = workspace.CurrentCamera
    if not camera then return end
    
    -- Store the last camera offset relative to the player
    local character = LocalPlayer.Character
    local root = character and character:FindFirstChild("HumanoidRootPart")
    
    if root then
        -- Smoothly transition to default camera behavior
        local connection
        connection = RunService.RenderStepped:Connect(function(deltaTime)
            camera.CameraType = Enum.CameraType.Custom
            if not character.Parent then
                connection:Disconnect()
                return
            end
        end)
        
        -- Cleanup after a short transition period
        delay(0.5, function()
            if connection then
                connection:Disconnect()
            end
        end)
    end
end

-- Modified lock toggle function
local function toggleLock()
    isLocked = not isLocked
    
    if isLocked then
        local targetPlayer = -- your target selection logic
        if targetPlayer then
            lockOntoTarget(targetPlayer)
        end
    else
        if lockConnection then
            lockConnection:Disconnect()
            lockConnection = nil
        end
        currentTarget = nil
        resetCamera()
    end
end

-- Handle player respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    if isLocked and currentTarget then
        -- Re-establish lock with brief delay to allow character to load
        wait(0.1)
        lockOntoTarget(currentTarget)
    end
end)