-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Configuration
local DETECTED_ANIMATION_IDS = {
    "rbxassetid://11343250001",     -- Original
    "rbxassetid://77727115892579",
    "rbxassetid://17141153099",
    "rbxassetid://17354976067",
    "rbxassetid://18462892217"
}
local TELEPORT_POSITION = Vector3.new(0, -435, 0)
local BASEPLATE_Y = -500
local CAMERA_OFFSET = Vector3.new(0, 10, 0) -- Adjust height as needed

-- State Variables
local isTeleporting = false
local originalCameraCFrame = nil
local cameraLockConnection = nil
local isRunning = true

-- Create a baseplate at Y = -500
local function createBaseplate()
    if workspace:FindFirstChild("CustomBaseplate") then return end
    local baseplate = Instance.new("Part")
    baseplate.Size = Vector3.new(512, 1, 512)
    baseplate.Anchored = true
    baseplate.Position = Vector3.new(0, BASEPLATE_Y, 0)
    baseplate.Name = "CustomBaseplate"
    baseplate.BrickColor = BrickColor.new("Bright green") -- Optional: Differentiate the baseplate
    baseplate.Parent = workspace
end

createBaseplate()

-- Safely get character and root part
local function getCharacterRoot(player)
    local char = player.Character
    if not char then return nil end
    local root = char:FindFirstChild("HumanoidRootPart")
    return char, root
end

-- Function to teleport the local player's camera to the baseplate
local function teleportCameraToBaseplate()
    if isTeleporting then return end
    isTeleporting = true

    local camera = workspace.CurrentCamera
    if not camera then
        warn("No camera found")
        isTeleporting = false
        return
    end

    -- Save the original camera CFrame
    originalCameraCFrame = camera.CFrame

    -- Set camera to baseplate position with an offset
    camera.CameraType = Enum.CameraType.Scriptable
    camera.CFrame = CFrame.new(TELEPORT_POSITION + CAMERA_OFFSET, TELEPORT_POSITION)

    -- Lock the camera's CFrame to remain at the baseplate
    cameraLockConnection = RunService.RenderStepped:Connect(function()
        camera.CFrame = CFrame.new(TELEPORT_POSITION + CAMERA_OFFSET, TELEPORT_POSITION)
    end)
end

-- Function to restore the camera to its original position
local function restoreCamera()
    if not isTeleporting then return end
    isTeleporting = false

    local camera = workspace.CurrentCamera
    if not camera then return end

    -- Restore the camera's original CFrame
    if originalCameraCFrame then
        camera.CameraType = Enum.CameraType.Custom
        camera.CFrame = originalCameraCFrame
    else
        camera.CameraType = Enum.CameraType.Custom
    end

    -- Disconnect the camera lock
    if cameraLockConnection then
        cameraLockConnection:Disconnect()
        cameraLockConnection = nil
    end
end

-- Function to handle teleportation when a detected animation is played
local function handleDetectedAnimation(player, track)
    if isTeleporting then return end

    -- Teleport the camera
    teleportCameraToBaseplate()

    -- Optional: Teleport the player to the baseplate
    local char, root = getCharacterRoot(LocalPlayer)
    if char and root then
        root.CFrame = CFrame.new(TELEPORT_POSITION + Vector3.new(0, 5, 0)) -- Slightly above the baseplate
    end

    -- Connect to the animation's Stopped event to restore the camera
    track.Stopped:Connect(function()
        restoreCamera()
    end)
end

-- Function to connect to a player's Animator and listen for animations
local function connectAnimationListener(player)
    local success, err = pcall(function()
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")

        animator.AnimationPlayed:Connect(function(track)
            local animId = track.Animation and track.Animation.AnimationId
            if animId and table.find(DETECTED_ANIMATION_IDS, animId) then
                handleDetectedAnimation(player, track)
            end
        end)
    end)
    if not success then
        warn("Error connecting animation listener for player:", player.Name, err)
    end
end

-- Connect to all current players
for _, player in ipairs(Players:GetPlayers()) do
    connectAnimationListener(player)
end

-- Connect to future players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        connectAnimationListener(player)
    end)
end)

-- GUI Creation
local function createGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PlayerTrackerGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    -- Lock/Unlock Button
    local LockButton = Instance.new("TextButton")
    LockButton.Size = UDim2.new(0, 120, 0, 40)
    LockButton.Position = UDim2.new(1, -140, 0, 10)
    LockButton.Text = "Lock In"
    LockButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LockButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    LockButton.Parent = screenGui

    -- Health Label
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Size = UDim2.new(0, 200, 0, 40)
    healthLabel.Position = UDim2.new(1, -220, 0, 60)
    healthLabel.Text = "Waiting for target..."
    healthLabel.TextScaled = true
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    healthLabel.Parent = screenGui

    -- Teleport Button
    local teleportButton = Instance.new("TextButton")
    teleportButton.Size = UDim2.new(0, 160, 0, 40)
    teleportButton.Position = UDim2.new(1, -180, 0, 110)
    teleportButton.Text = "Teleport to Player"
    teleportButton.Visible = false
    teleportButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    teleportButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    teleportButton.Parent = screenGui

    return {
        screenGui = screenGui,
        lockButton = LockButton,
        healthLabel = healthLabel,
        teleportButton = teleportButton
    }
end

-- Function to get the player with the lowest health
local function getPlayerWithLowestHealth()
    local lowestHealthPlayer = nil
    local lowestHealth = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            local humanoid = character and character:FindFirstChild("Humanoid")

            if humanoid and humanoid.Health > 0 then
                if humanoid.Health < lowestHealth then
                    lowestHealth = humanoid.Health
                    lowestHealthPlayer = player
                end
            end
        end
    end

    return lowestHealthPlayer
end

-- Function to reset the camera to default behavior
local function resetCamera()
    local camera = workspace.CurrentCamera
    if not camera then return end
    camera.CameraType = Enum.CameraType.Custom
end

-- Function to lock the camera onto a target player
local function lockOntoTarget(targetPlayer, gui)
    if lockConnection then 
        lockConnection:Disconnect()
        lockConnection = nil
    end

    if not targetPlayer then return end

    currentTarget = targetPlayer
    local camera = workspace.CurrentCamera
    if not camera then return end

    local VERTICAL_OFFSET = Vector3.new(0, 2, 0)

    lockConnection = RunService.RenderStepped:Connect(function()
        if not currentTarget or not currentTarget.Character then
            if lockConnection then lockConnection:Disconnect() end
            return
        end

        local targetRoot = currentTarget.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = currentTarget.Character:FindFirstChild("Humanoid")

        if not targetRoot or not humanoid or humanoid.Health <= 0 then
            if lockConnection then
                lockConnection:Disconnect()
                lockConnection = nil
            end
            if isLocked then
                local newTarget = getPlayerWithLowestHealth()
                if newTarget then
                    lockOntoTarget(newTarget, gui)
                else
                    resetCamera()
                end
            else
                resetCamera()
            end
            return
        end

        -- Directly set camera to face the target's root part instantly
        local targetPos = targetRoot.Position + VERTICAL_OFFSET
        camera.CFrame = CFrame.new(camera.CFrame.Position, targetPos)
    end)
end

-- Function to update the GUI with the current target's health
local function updateGui(gui)
    local success, err = pcall(function()
        local targetPlayer = getPlayerWithLowestHealth()

        if targetPlayer and targetPlayer.Character then
            local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                gui.healthLabel.Text = string.format(
                    "Player: %s - Health: %d",
                    targetPlayer.Name,
                    math.floor(humanoid.Health)
                )
                gui.teleportButton.Visible = true
                return targetPlayer
            end
        end

        gui.healthLabel.Text = "No valid target"
        gui.teleportButton.Visible = false
        return nil
    end)

    if not success then
        warn("Error in updateGui:", err)
    end
end

-- Function to teleport the local player to a target player
local function teleportToPlayer(targetPlayer)
    local success, err = pcall(function()
        if not targetPlayer then return false end

        local char, root = getCharacterRoot(LocalPlayer)
        local tchar, troot = getCharacterRoot(targetPlayer)

        if root and troot then
            root.CFrame = troot.CFrame * CFrame.new(0, 0, 5)
            return true
        end
        return false
    end)
    if not success then
        warn("Error in teleportToPlayer:", err)
    end
end

-- Initialization Function
local function init()
    local gui = createGui()

    -- Lock/Unlock Button Functionality
    gui.lockButton.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            isLocked = not isLocked
            gui.lockButton.Text = isLocked and "Unlock" or "Lock In"

            if isLocked then
                local targetPlayer = getPlayerWithLowestHealth()
                if targetPlayer then
                    lockOntoTarget(targetPlayer, gui)
                end
            else
                if lockConnection then
                    lockConnection:Disconnect()
                    lockConnection = nil
                end
                currentTarget = nil
                resetCamera()
            end
        end)
        if not success then
            warn("Error in lockButton click:", err)
        end
    end)

    -- Teleport Button Functionality
    gui.teleportButton.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            local targetPlayer = getPlayerWithLowestHealth()
            if targetPlayer then
                if teleportToPlayer(targetPlayer) then
                    isLocked = true
                    gui.lockButton.Text = "Unlock"
                    lockOntoTarget(targetPlayer, gui)
                end
            end
        end)
        if not success then
            warn("Error in teleportButton click:", err)
        end
    end)

    -- Update GUI Periodically
    RunService.Heartbeat:Connect(function()
        if isRunning then
            updateGui(gui)
        end
    end)

    -- Clean Up When GUI is Destroyed
    gui.screenGui.Destroying:Connect(function()
        isRunning = false
        if lockConnection then
            lockConnection:Disconnect()
        end
        if isTeleporting then
            restoreCamera()
        end
    end)
end

-- Start the Script
init()