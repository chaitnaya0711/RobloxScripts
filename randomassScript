local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UpdateFrequency = 1  -- Check every 1 second
local currentTarget = nil
local lockConnection = nil  -- Connection variable for camera lock
local isLocked = false  -- To keep track of locking state

-- Create GUI and persist across respawns
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false  -- Makes GUI persistent across respawns
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- "Lock In" button
local LockButton = Instance.new("TextButton")
LockButton.Size = UDim2.new(0, 120, 0, 40)
LockButton.Position = UDim2.new(1, -140, 0, 10)
LockButton.Text = "Lock In"
LockButton.Parent = screenGui

-- Health label
local healthLabel = Instance.new("TextLabel")
healthLabel.Size = UDim2.new(0, 200, 0, 40)
healthLabel.Position = UDim2.new(1, -220, 0, 60)
healthLabel.Text = "Player: [Name] - Health: [Health]"
healthLabel.TextScaled = true
healthLabel.BackgroundTransparency = 1
healthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
healthLabel.Parent = screenGui

-- Teleport button
local teleportButton = Instance.new("TextButton")
teleportButton.Size = UDim2.new(0, 120, 0, 40)
teleportButton.Position = UDim2.new(1, -140, 0, 110)
teleportButton.Text = "Teleport to Player"
teleportButton.Visible = false
teleportButton.Parent = screenGui

-- Function to get the player with the lowest health
local function getPlayerWithLowestHealth()
    local lowestHealthPlayer = nil
    local lowestHealth = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local health = player.Character.Humanoid.Health
            if health > 0 and health < lowestHealth then
                lowestHealth = health
                lowestHealthPlayer = player
            end
        end
    end

    return lowestHealthPlayer
end

-- Function to update the GUI with the lowest health player
local function updateGui()
    local targetPlayer = getPlayerWithLowestHealth()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
        healthLabel.Text = "Player: " .. targetPlayer.Name .. " - Health: " .. math.floor(targetPlayer.Character.Humanoid.Health)
        teleportButton.Visible = true
        return targetPlayer
    else
        healthLabel.Text = "No player available"
        teleportButton.Visible = false
        return nil
    end
end

-- Function to lock onto a specified target
local function lockOntoTarget(targetPlayer)
    -- Disconnect previous lock if it exists
    if lockConnection then
        lockConnection:Disconnect()
    end

    currentTarget = targetPlayer
    local targetPart = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera

    if targetPart then
        lockConnection = RunService.RenderStepped:Connect(function()
            -- Error handling if the target player leaves or dies
            if not targetPart or not currentTarget or not currentTarget.Character then
                lockConnection:Disconnect()
                currentTarget = nil
                -- Switch to the player with the lowest health
                local newTarget = getPlayerWithLowestHealth()
                if isLocked and newTarget then
                    lockOntoTarget(newTarget)
                end
                return
            end

            local humanoid = currentTarget.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health <= 0 then
                lockConnection:Disconnect()
                currentTarget = nil
                -- Switch to the player with the lowest health
                local newTarget = getPlayerWithLowestHealth()
                if isLocked and newTarget then
                    lockOntoTarget(newTarget)
                end
                return
            end

            -- Continuously lock the camera onto the targetPart
            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
        end)
    else
        warn("No valid target to lock onto.")
    end
end

-- Toggle lock state and update the button text
local function toggleLock()
    isLocked = not isLocked
    LockButton.Text = isLocked and "Unlock" or "Lock In"

    if isLocked then
        local targetPlayer = getPlayerWithLowestHealth()
        if targetPlayer then
            lockOntoTarget(targetPlayer)
        end
    else
        if lockConnection then
            lockConnection:Disconnect()
            lockConnection = nil
        end
        currentTarget = nil
    end
end

-- Button click to toggle lock state
LockButton.MouseButton1Click:Connect(toggleLock)

-- Function to teleport to and lock onto the player with the lowest health
local function teleportToPlayer(targetPlayer)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))

        -- Enable lock-on and lock onto the player after teleporting
        isLocked = true
        LockButton.Text = "Unlock"
        lockOntoTarget(targetPlayer)
    end
end

-- Button click to teleport and lock onto the player with the lowest health
teleportButton.MouseButton1Click:Connect(function()
    local targetPlayer = getPlayerWithLowestHealth()
    if targetPlayer then
        teleportToPlayer(targetPlayer)
    end
end)

-- Function to handle player touch for auto-attack
local function onPlayerTouched(hit)
    local otherPlayer = Players:GetPlayerFromCharacter(hit.Parent)
    if otherPlayer and otherPlayer ~= LocalPlayer then
        -- Simulate attack or interaction
        -- Call the actual attack function here, or simulate the effect
        print("Attacked " .. otherPlayer.Name)
    end
end

-- Connect the Touched event for the player's character when it respawns
LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.Touched:Connect(onPlayerTouched)
end)

-- Initialize with the current character's hitbox touch detection
if LocalPlayer.Character then
    local humanoidRootPart = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    humanoidRootPart.Touched:Connect(onPlayerTouched)
end

-- Update GUI periodically
while true do
    updateGui()
    wait(UpdateFrequency)
end
