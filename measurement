-- Configuration Module
local Config = {}

Config.UI = {
    MainFrame = {
        Size = UDim2.new(0, 200, 0, 140),
        Color = Color3.fromRGB(32, 34, 37),
        CornerRadius = UDim.new(0, 10)
    },
    TextColor = Color3.fromRGB(255, 255, 255),
    AccentColor = Color3.fromRGB(88, 101, 242),  -- Discord Blurple
    ButtonColor = Color3.fromRGB(47, 49, 54),
    HoverColor = Color3.fromRGB(57, 59, 64),
    Font = Enum.Font.GothamBold,
    SecondaryFont = Enum.Font.Gotham
}

Config.Measurement = {
    OutlineColor = Color3.fromRGB(88, 101, 242),
    OutlineTransparency = 0.2,
    LabelBackgroundColor = Color3.fromRGB(32, 34, 37),
    LabelTextColor = Color3.fromRGB(255, 255, 255),
    Units = {
        ["Studs"] = 1,
        ["Meters"] = 3.571428571,
        ["Feet"] = 11.7142857
    }
}

-- UI Module
local UIModule = {}

function UIModule.new()
    local player = game:GetService("Players").LocalPlayer
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MeasurementSystem"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = player.PlayerGui

    -- Main container with enhanced shadow
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = Config.UI.MainFrame.Size
    mainFrame.Position = UDim2.new(1, -220, 0, 20)
    mainFrame.BackgroundColor3 = Config.UI.MainFrame.Color
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    -- Enhanced shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.ZIndex = -1
    shadow.Image = "rbxassetid://5554236805"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.Parent = mainFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = Config.UI.MainFrame.CornerRadius
    corner.Parent = mainFrame

    -- Gradient header
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 35)
    header.BackgroundColor3 = Config.UI.AccentColor
    header.Parent = mainFrame

    local headerGradient = Instance.new("UIGradient")
    headerGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Config.UI.AccentColor),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(Config.UI.AccentColor.R * 0.8, 
                                                   Config.UI.AccentColor.G * 0.8, 
                                                   Config.UI.AccentColor.B * 0.8))
    })
    headerGradient.Parent = header

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 10)
    headerCorner.Parent = header

    -- Enhanced toggle button
    local toggleButton = Instance.new("ImageButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 24, 0, 24)
    toggleButton.Position = UDim2.new(0, 10, 0, 5)
    toggleButton.BackgroundTransparency = 1
    toggleButton.Image = "rbxassetid://3926305904"
    toggleButton.ImageRectOffset = Vector2.new(924, 724)
    toggleButton.ImageRectSize = Vector2.new(36, 36)
    toggleButton.Parent = header

    -- Enhanced title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, -60, 1, 0)
    title.Position = UDim2.new(0, 45, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Measurement Tool"
    title.TextColor3 = Config.UI.TextColor
    title.Font = Config.UI.Font
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = header

    -- Enhanced measurements display
    local measurements = Instance.new("TextLabel")
    measurements.Name = "Measurements"
    measurements.Size = UDim2.new(1, -20, 0, 70)
    measurements.Position = UDim2.new(0, 10, 0, 40)
    measurements.BackgroundTransparency = 1
    measurements.Text = "Click an object to measure"
    measurements.TextColor3 = Config.UI.TextColor
    measurements.Font = Config.UI.SecondaryFont
    measurements.TextSize = 14
    measurements.TextWrapped = true
    measurements.TextXAlignment = Enum.TextXAlignment.Left
    measurements.Parent = mainFrame

    -- Enhanced unit selector
    local unitButton = Instance.new("TextButton")
    unitButton.Name = "UnitButton"
    unitButton.Size = UDim2.new(0, 80, 0, 26)
    unitButton.Position = UDim2.new(1, -90, 0, 105)
    unitButton.BackgroundColor3 = Config.UI.ButtonColor
    unitButton.Text = "Studs"
    unitButton.TextColor3 = Config.UI.TextColor
    unitButton.Font = Config.UI.SecondaryFont
    unitButton.TextSize = 14
    unitButton.AutoButtonColor = false
    unitButton.Parent = mainFrame

    local unitCorner = Instance.new("UICorner")
    unitCorner.CornerRadius = UDim.new(0, 6)
    unitCorner.Parent = unitButton

    -- Button hover effect
    unitButton.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(unitButton, 
            TweenInfo.new(0.2), 
            {BackgroundColor3 = Config.UI.HoverColor}
        ):Play()
    end)

    unitButton.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(unitButton, 
            TweenInfo.new(0.2), 
            {BackgroundColor3 = Config.UI.ButtonColor}
        ):Play()
    end)

    return {
        GUI = screenGui,
        MainFrame = mainFrame,
        ToggleButton = toggleButton,
        Measurements = measurements,
        UnitButton = unitButton
    }
end

-- Measurement Module
local MeasurementModule = {}

function MeasurementModule.new(ui)
    local measuring = false
    local currentUnit = "Studs"
    local currentOutline = nil
    local selectedModel = nil
    local labels = {}
    local mouse = game:GetService("Players").LocalPlayer:GetMouse()

    local function clearLabels()
        for _, label in pairs(labels) do
            label:Destroy()
        end
        labels = {}
    end

    local function createLabel(text, position)
        local label = Instance.new("BillboardGui")
        label.Size = UDim2.new(0, 100, 0, 30)
        label.StudsOffset = Vector3.new(0, 0.5, 0)
        label.AlwaysOnTop = true

        local background = Instance.new("Frame")
        background.Size = UDim2.new(1, 0, 1, 0)
        background.BackgroundColor3 = Config.Measurement.LabelBackgroundColor
        background.BackgroundTransparency = 0.2
        background.Parent = label

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 4)
        corner.Parent = background

        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = text
        textLabel.TextColor3 = Config.Measurement.LabelTextColor
        textLabel.Font = Config.UI.SecondaryFont
        textLabel.TextSize = 14
        textLabel.Parent = label

        label.Parent = ui.GUI
        label.StudsOffset = position
        return label
    end

    local function createOutline(modelOrPart)
        if currentOutline then
            currentOutline:Destroy()
            clearLabels()
        end

        currentOutline = Instance.new("SelectionBox")
        currentOutline.Color3 = Config.Measurement.OutlineColor
        currentOutline.Transparency = Config.Measurement.OutlineTransparency
        currentOutline.LineThickness = 0.05
        currentOutline.Parent = ui.GUI

        if modelOrPart:IsA("Model") then
            currentOutline.Adornee = modelOrPart.PrimaryPart or modelOrPart:GetChildren()[1]
        else
            currentOutline.Adornee = modelOrPart
        end

        return currentOutline
    end

    local function updateMeasurements(modelOrPart)
        if not modelOrPart then return end

        local size
        if modelOrPart:IsA("Model") then
            size = modelOrPart:GetExtentsSize()
        else
            size = modelOrPart.Size
        end

        local multiplier = Config.Measurement.Units[currentUnit]
        local position = modelOrPart:IsA("Model") and 
            (modelOrPart.PrimaryPart or modelOrPart:GetChildren()[1]).Position or 
            modelOrPart.Position

        clearLabels()

        -- Create dimension labels
        local measurements = {
            {value = size.X * multiplier, offset = Vector3.new(0, size.Y/2, 0), prefix = "W: "},
            {value = size.Y * multiplier, offset = Vector3.new(size.X/2, 0, 0), prefix = "H: "},
            {value = size.Z * multiplier, offset = Vector3.new(0, size.Y/2, size.Z/2), prefix = "D: "}
        }

        for _, m in ipairs(measurements) do
            local label = createLabel(
                string.format("%s%.1f %s", m.prefix, m.value, currentUnit),
                m.offset
            )
            label.Adornee = currentOutline.Adornee
            table.insert(labels, label)
        end

        -- Update UI panel
        ui.Measurements.Text = string.format(
            "Width: %.1f %s\nHeight: %.1f %s\nDepth: %.1f %s",
            size.X * multiplier, currentUnit,
            size.Y * multiplier, currentUnit,
            size.Z * multiplier, currentUnit
        )
    end

    -- Toggle measuring
    ui.ToggleButton.MouseButton1Click:Connect(function()
        measuring = not measuring
        ui.ToggleButton.ImageColor3 = measuring and 
            Color3.fromRGB(255, 255, 255) or 
            Color3.fromRGB(150, 150, 150)

        if not measuring then
            if currentOutline then
                currentOutline:Destroy()
                clearLabels()
            end
            ui.Measurements.Text = "Click an object to measure"
        end
    end)

    -- Unit cycling
    ui.UnitButton.MouseButton1Click:Connect(function()
        local units = {"Studs", "Meters", "Feet"}
        local currentIndex = table.find(units, currentUnit)
        currentUnit = units[currentIndex % #units + 1] or units[1]
        ui.UnitButton.Text = currentUnit
        if selectedModel then
            updateMeasurements(selectedModel)
        end
    end)

    -- Mouse input handling
    mouse.Button1Down:Connect(function()
        if measuring then
            local target = mouse.Target
            if target and not target:IsDescendantOf(ui.GUI) then
                if target:IsA("BasePart") or target:IsA("Model") then
                    createOutline(target)
                    selectedModel = target
                    updateMeasurements(selectedModel)
                else
                    ui.Measurements.Text = "Not a measurable object"
                end
            end
        end
    end)

    -- Dragging functionality
    local dragStart, startPos
    local dragging = false

    ui.MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragStart = input.Position
            startPos = ui.MainFrame.Position
            dragging = true
        end
    end)

    ui.MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            ui.MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    ui.MainFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return {
        Measure = createOutline,
        UpdateMeasurements = updateMeasurements
    }
end

-- Initialize the measurement system
local function initializeMeasurementSystem()
    local ui = UIModule.new()
    local measurement = MeasurementModule.new(ui)
    return {
        UI = ui,
        Measurement = measurement
    }
end

-- Start the system
return initializeMeasurementSystem()