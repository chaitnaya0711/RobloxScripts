-- Create the Screen GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Helper function for creating buttons
local function createButton(text, position)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 250, 0, 60)
    button.Position = position
    button.Text = text
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    button.Parent = ScreenGui
    return button
end

-- Create buttons with improved style
local AddCheckpointButton = createButton("Add Checkpoint", UDim2.new(0, 10, 0, 10))
local RemoveCheckpointButton = createButton("Remove Checkpoint", UDim2.new(0, 10, 0, 80))
local ChangeUnitsButton = createButton("Change Units", UDim2.new(0, 10, 0, 150))
local ShowMapSizeButton = createButton("Show Map Size", UDim2.new(0, 10, 0, 220))
local MeasureDistanceButton = createButton("Measure Distance to Player", UDim2.new(0, 10, 0, 290))

-- Create a label for map size display
local MapSizeLabel = Instance.new("TextLabel")
MapSizeLabel.Size = UDim2.new(0.4, 0, 0.1, 0)
MapSizeLabel.Position = UDim2.new(0.3, 0, 0, 10)
MapSizeLabel.Text = "Map Size: Calculating..."
MapSizeLabel.TextScaled = true
MapSizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
MapSizeLabel.BackgroundTransparency = 1
MapSizeLabel.Parent = ScreenGui

-- Variables
local checkpoints = {}
local lines = {}
local currentUnit = "studs"
local unitMultiplier = 1

-- Calculate map size function
local function calculateMapSize()
    local minBound = Vector3.new(math.huge, math.huge, math.huge)
    local maxBound = Vector3.new(-math.huge, -math.huge, -math.huge)

    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            local partSize = part.Size
            local partPosition = part.Position
            minBound = Vector3.new(
                math.min(minBound.X, partPosition.X - partSize.X / 2),
                math.min(minBound.Y, partPosition.Y - partSize.Y / 2),
                math.min(minBound.Z, partPosition.Z - partSize.Z / 2)
            )
            maxBound = Vector3.new(
                math.max(maxBound.X, partPosition.X + partSize.X / 2),
                math.max(maxBound.Y, partPosition.Y + partSize.Y / 2),
                math.max(maxBound.Z, partPosition.Z + partSize.Z / 2)
            )
        end
    end

    return maxBound - minBound
end

-- Display map size function
local function displayMapSize()
    local mapSize = calculateMapSize()
    local length = mapSize.X * unitMultiplier
    local width = mapSize.Z * unitMultiplier
    local height = mapSize.Y * unitMultiplier

    MapSizeLabel.Text = string.format("Map Size:\nLength: %.2f %s\nWidth: %.2f %s\nHeight: %.2f %s", 
        length, currentUnit, width, currentUnit, height, currentUnit)
end

-- Create a checkpoint at player's position
local function createCheckpoint(position)
    local checkpoint = Instance.new("Part")
    checkpoint.Shape = Enum.PartType.Ball
    checkpoint.Color = Color3.fromRGB(0, 0, 255)
    checkpoint.Material = Enum.Material.Neon
    checkpoint.Size = Vector3.new(1, 1, 1)
    checkpoint.Anchored = true
    checkpoint.Position = position
    checkpoint.Parent = workspace
    table.insert(checkpoints, checkpoint)
    return checkpoint
end

-- Create a line between two checkpoints
local function createStraightLine(pointA, pointB)
    local distance = (pointA.Position - pointB.Position).Magnitude
    local midpoint = (pointA.Position + pointB.Position) / 2
    local line = Instance.new("Part")
    line.Size = Vector3.new(0.2, 0.2, distance)
    line.Anchored = true
    line.CanCollide = false
    line.Color = Color3.fromRGB(255, 255, 0)
    line.Material = Enum.Material.Neon
    line.CFrame = CFrame.new(midpoint, pointB.Position)
    line.Parent = workspace
    table.insert(lines, line)

    -- Create a text label to display the distance
    local distanceLabel = Instance.new("BillboardGui", line)
    distanceLabel.Size = UDim2.new(0, 100, 0, 50)
    distanceLabel.StudsOffset = Vector3.new(0, 2, 0)
    distanceLabel.AlwaysOnTop = true

    local distanceText = Instance.new("TextLabel", distanceLabel)
    distanceText.Size = UDim2.new(1, 0, 1, 0)
    distanceText.TextScaled = true
    distanceText.BackgroundTransparency = 1
    distanceText.Text = string.format("%.2f %s", distance * unitMultiplier, currentUnit)
    distanceText.TextColor3 = Color3.fromRGB(255, 255, 255)
end

-- Add checkpoint when button is clicked
AddCheckpointButton.MouseButton1Click:Connect(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local position = character:WaitForChild("HumanoidRootPart").Position
    local checkpoint = createCheckpoint(position)

    if #checkpoints > 1 then
        createStraightLine(checkpoints[#checkpoints - 1], checkpoint)
    end
end)

-- Remove last checkpoint and its line
RemoveCheckpointButton.MouseButton1Click:Connect(function()
    if #checkpoints > 0 then
        checkpoints[#checkpoints]:Destroy()
        table.remove(checkpoints)

        if #lines > 0 then
            lines[#lines]:Destroy()
            table.remove(lines)
        end
    end
end)

-- Toggle units between studs and meters
ChangeUnitsButton.MouseButton1Click:Connect(function()
    if currentUnit == "studs" then
        currentUnit = "meters"
        unitMultiplier = 0.28
    else
        currentUnit = "studs"
        unitMultiplier = 1
    end
end)

-- Show map size
ShowMapSizeButton.MouseButton1Click:Connect(displayMapSize)

-- Player Selection GUI (Added Feature)
local PlayerSelectionFrame = Instance.new("Frame")
PlayerSelectionFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
PlayerSelectionFrame.Position = UDim2.new(0.25, 0, 0.25, 0)
PlayerSelectionFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
PlayerSelectionFrame.Visible = false
PlayerSelectionFrame.Parent = ScreenGui

local ClosePlayerSelection = createButton("Close", UDim2.new(0.8, 0, 0, 0))
ClosePlayerSelection.MouseButton1Click:Connect(function()
    PlayerSelectionFrame.Visible = false
end)

local function populatePlayerSelection()
    for _, player in pairs(game.Players:GetPlayers()) do
        local playerButton = createButton(player.Name, UDim2.new(0, 10, 0, #PlayerSelectionFrame:GetChildren() * 70))
        playerButton.MouseButton1Click:Connect(function()
            print("Selected player: " .. player.Name)
            -- Logic to draw line between two players
        end)
        playerButton.Parent = PlayerSelectionFrame
    end
end

MeasureDistanceButton.MouseButton1Click:Connect(function()
    PlayerSelectionFrame.Visible = true
    populatePlayerSelection()
end)
