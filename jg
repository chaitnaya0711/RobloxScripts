local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local DEATH_COUNTER_NAME = "Death Counter"

-- Configuration
local DOT_CONFIG = {
    Size = UDim2.new(0, 12, 0, 12), -- Size of the dot
    Color = Color3.new(1, 0, 0),     -- Red color
    OffsetY = 3,                     -- How far above the head
    Transparency = 0.1               -- Make it slightly transparent
}

local markerGuis = {}

local function createDot(player)
    -- Create BillboardGui
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "MarkerDot"
    billboardGui.AlwaysOnTop = true
    billboardGui.Size = UDim2.new(0, 50, 0, 50)
    billboardGui.StudsOffsetWorldSpace = Vector3.new(0, DOT_CONFIG.OffsetY, 0)
    billboardGui.Adornee = player.Character:WaitForChild("Head")
    
    -- Create the dot frame
    local dot = Instance.new("Frame")
    dot.Name = "Dot"
    dot.Size = DOT_CONFIG.Size
    dot.Position = UDim2.new(0.5, -DOT_CONFIG.Size.X.Offset/2, 0.5, -DOT_CONFIG.Size.Y.Offset/2)
    dot.BackgroundColor3 = DOT_CONFIG.Color
    dot.BackgroundTransparency = DOT_CONFIG.Transparency
    dot.BorderSizePixel = 0
    
    -- Make the dot circular
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = dot
    
    -- Add a subtle glow
    local glow = Instance.new("UIStroke")
    glow.Name = "Glow"
    glow.Color = DOT_CONFIG.Color
    glow.Thickness = 2
    glow.Transparency = 0.5
    glow.Parent = dot
    
    dot.Parent = billboardGui
    billboardGui.Parent = player.Character.Head
    
    return billboardGui
end

local function hasDeathCounter(player)
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    
    return (backpack and backpack:FindFirstChild(DEATH_COUNTER_NAME)) or
           (character and character:FindFirstChild(DEATH_COUNTER_NAME))
end

local function updateMarker(player)
    if not player.Character or not player.Character:FindFirstChild("Head") then return end
    
    local existingMarker = markerGuis[player]
    local hasCounter = hasDeathCounter(player)
    
    if hasCounter then
        if not existingMarker or not existingMarker.Parent then
            markerGuis[player] = createDot(player)
        end
    else
        if existingMarker then
            existingMarker:Destroy()
            markerGuis[player] = nil
        end
    end
end

local function onCharacterAdded(player, character)
    -- Wait for the head to load
    local head = character:WaitForChild("Head", 5)
    if not head then return end
    
    -- Clear any existing marker
    local existingMarker = markerGuis[player]
    if existingMarker then
        existingMarker:Destroy()
        markerGuis[player] = nil
    end
    
    -- Update the marker
    updateMarker(player)
end

local function monitorPlayer(player)
    -- Monitor character changes
    player.CharacterAdded:Connect(function(character)
        onCharacterAdded(player, character)
    end)
    
    -- Monitor backpack changes
    task.spawn(function()
        local backpack = player:WaitForChild("Backpack", 10)
        if backpack then
            backpack.ChildAdded:Connect(function()
                updateMarker(player)
            end)
            backpack.ChildRemoved:Connect(function()
                updateMarker(player)
            end)
        end
    end)
    
    -- Set up initial state if character exists
    if player.Character then
        onCharacterAdded(player, player.Character)
    end
end

-- Clean up markers when players leave
Players.PlayerRemoving:Connect(function(player)
    local marker = markerGuis[player]
    if marker then
        marker:Destroy()
        markerGuis[player] = nil
    end
end)

-- Initialize for existing players
for _, player in ipairs(Players:GetPlayers()) do
    monitorPlayer(player)
end

-- Monitor new players
Players.PlayerAdded:Connect(monitorPlayer)